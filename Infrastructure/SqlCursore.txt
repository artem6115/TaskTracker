CREATE PROCEDURE [dbo].[WorkUserTime]
	@ProjectId bigint,
	@UserId bigint
AS
begin
declare @TaskId bigint
declare @DateOfCreated date
declare @DateOfClosed date
declare MyCursor cursor scroll for
select p.Id,t.DateOfCreated,t.DateOfClosed
from Tasks AS t 
INNER JOIN Epics as e
ON t.EpicId = e.Id INNER JOIN
Projects as p ON e.ProjectId = p.Id 
print(1)
SET @TaskId = (Select Count(*)
from Tasks AS t 
INNER JOIN Epics as e
ON t.EpicId = e.Id INNER JOIN
Projects as p ON e.ProjectId = p.Id )
print(CAST(@TAskId as nvarchar(max)))
open MyCursor
fetch MyCursor into @TaskId, @DateOfCreated, @DateOfClosed
print('cursore opend')
while @@FETCH_STATUS <> -1
begin
	print(CAST(@TaskId as nvarchar(max))+' '+CAST(@DateOfCreated as nvarchar(max))+ ' ' + CAST(@DateOfClosed as nvarchar(max)))
	fetch MyCursor into @TaskId, @DateOfCreated, @DateOfClosed
end

close MyCursor
deallocate MyCursor
end

RETURN 0


Create TRIGGER [dbo].[UpdateTaskTriger] ON [dbo].[Tasks] 
After Update,Delete
AS 
IF IS_MEMBER ('db_owner') = 0
declare @Id bigint
declare @StatusTask int
declare @IdDelete bigint
declare @StatusTaskDelete int
BEGIN
	print('triget work')
	set @Id = (select Id from inserted)
	set @IdDelete = (select Id from deleted)
	set @StatusTask = (select StatusTask from inserted)
	set @StatusTaskDelete = (select StatusTask from deleted)
	if(@StatusTask = 4 and @StatusTaskDelete <> 4)
	Begin
		Update Tasks set StatusTask = 0
		Where PreviousTaskId=@Id and UserId is null
		Update Tasks set StatusTask = 1
		Where PreviousTaskId=@Id and UserId is not null;
	end;
  	if(@StatusTask <> 4 and @StatusTaskDelete = 4)
	Begin
		Update Tasks set StatusTask = 3
		Where PreviousTaskId=@Id 
	end;

END